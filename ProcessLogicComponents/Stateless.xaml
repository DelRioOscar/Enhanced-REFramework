<Activity mc:Ignorable="sap sap2010 sads" x:Class="Statelss" this:Statelss.in_DebugMessages="False" this:Statelss.in_MaxRetryNumber="3"
 xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities"
 xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
 xmlns:mva="clr-namespace:Microsoft.VisualBasic.Activities;assembly=System.Activities"
 xmlns:sads="http://schemas.microsoft.com/netfx/2010/xaml/activities/debugger"
 xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation"
 xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation"
 xmlns:scg="clr-namespace:System.Collections.Generic;assembly=mscorlib"
 xmlns:sco="clr-namespace:System.Collections.ObjectModel;assembly=mscorlib"
 xmlns:this="clr-namespace:"
 xmlns:ui="http://schemas.uipath.com/workflow/activities"
 xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property Name="in_States" Type="InArgument(scg:List(scg:KeyValuePair(x:String, scg:KeyValuePair(x:String, scg:Dictionary(x:String, x:Object)))))" />
    <x:Property Name="in_DebugMessages" Type="InArgument(x:Boolean)" />
    <x:Property Name="in_MaxRetryNumber" Type="InArgument(x:Int32)" />
    <x:Property Name="out_Successful" Type="OutArgument(x:Boolean)" />
    <x:Property Name="io_FailedStateIndex" Type="InOutArgument(x:Int32)" />
    <x:Property Name="io_FailedState" Type="InOutArgument(scg:KeyValuePair(x:String, scg:KeyValuePair(x:String, scg:Dictionary(x:String, x:Object))))" />
    <x:Property Name="firstCrucialStateIndex" Type="InArgument(x:Int32)" />
  </x:Members>
  <mva:VisualBasic.Settings>
    <x:Null />
  </mva:VisualBasic.Settings>
  <sap2010:WorkflowViewState.IdRef>Statelss_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <sco:Collection x:TypeArguments="x:String">
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Drawing</x:String>
      <x:String>System.IO</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>System.Windows.Markup</x:String>
      <x:String>Microsoft.VisualBasic.CompilerServices</x:String>
    </sco:Collection>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <sco:Collection x:TypeArguments="AssemblyReference">
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>UiPath.Core</AssemblyReference>
      <AssemblyReference>UiPath.Core.Activities</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>WindowsBase</AssemblyReference>
      <AssemblyReference>PresentationCore</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>Microsoft.VisualStudio.Services.Common</AssemblyReference>
      <AssemblyReference>System.ComponentModel.Composition</AssemblyReference>
      <AssemblyReference>System.Runtime.WindowsRuntime</AssemblyReference>
    </sco:Collection>
  </TextExpression.ReferencesForImplementation>
  <Sequence sap2010:Annotation.AnnotationText="Go through all the states defined and try to execute the actions using the given selector, the given action, and the given arguments for the action. Success is declared if we are able to execute the final action&#xA;&#xA;Dictionary&lt;string, object&gt; defines all command options. Key sensitive. Implemented options are the following:&#xA;&#xA;New dictionary(Of String, Object) From {&#xA;{&quot;TimeoutMS&quot;, 5000},&#xA;{&quot;ContinueOnError&quot;, True},&#xA;{&quot;ActionMethod&quot;, &quot;Hardware&quot;}, \\&quot;Hardware&quot;, &quot;Simulate&quot;, &quot;SendWindowMessages&quot; are the accepted values. Anything other means &quot;Hardware&quot;&#xA;{&quot;ScanTimeoutMS&quot;, 1000},&#xA;{&quot;MarkStateAsCrucial&quot;, False},&#xA;{&quot;Text&quot;, &quot;Text to type, required for type action&quot;}&#xA;}" DisplayName="Stateless" sap2010:WorkflowViewState.IdRef="Sequence_1">
    <Sequence.Variables>
      <Variable x:TypeArguments="x:Int32" Default="0" Name="indexOfStates" />
      <Variable x:TypeArguments="x:Boolean" Default="False" Name="scanMode" />
      <Variable x:TypeArguments="x:Int32" Default="0" Name="RetryNumber" />
    </Sequence.Variables>
    <While sap2010:Annotation.AnnotationText="Cycle through all the states to execute" DisplayName="For each pair of states, find state and execute action" sap2010:WorkflowViewState.IdRef="While_1" Condition="[indexOfStates &lt; in_States.Count]">
      <Sequence sap2010:Annotation.AnnotationText="Find the element corresponding to the selector" DisplayName="Find State" sap2010:WorkflowViewState.IdRef="Sequence_2">
        <Sequence.Variables>
          <Variable x:TypeArguments="ui:UiElement" Default="[Nothing]" Name="element" />
          <Variable x:TypeArguments="scg:Dictionary(x:String, x:Object)" Name="actionArguments" />
          <Variable x:TypeArguments="scg:Dictionary(x:String, x:Object)" Default="[New dictionary(Of String, Object) From {&#xA;{&quot;TimeoutMS&quot;, 5000},&#xA;{&quot;ContinueOnError&quot;, True},&#xA;{&quot;ActionMethod&quot;, &quot;Hardware&quot;},&#xA;{&quot;ScanTimeoutMS&quot;, 1000},&#xA;{&quot;Text&quot;, &quot;&quot;}&#xA;}]" Name="defaultActionArguments" />
          <Variable x:TypeArguments="x:String" Name="selector" />
          <Variable x:TypeArguments="x:String" Name="action" />
        </Sequence.Variables>
        <Sequence DisplayName="Decode Input Data" sap2010:WorkflowViewState.IdRef="Sequence_15">
          <Sequence sap2010:Annotation.AnnotationText="determine arguments provided for the action to be executed and add defaults if those are not provided, like Timeout or Continue on Error options" DisplayName="Determine Action Arguments" sap2010:WorkflowViewState.IdRef="Sequence_11">
            <If Condition="[in_States.Item(indexOfStates).Value.Value isNot Nothing]" DisplayName="If dictionary exists in input" sap2010:WorkflowViewState.IdRef="If_15">
              <If.Then>
                <Assign DisplayName="Read Action arguments" sap2010:WorkflowViewState.IdRef="Assign_4">
                  <Assign.To>
                    <OutArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)">[actionArguments]</OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)">[in_States.Item(indexOfStates).Value.Value]</InArgument>
                  </Assign.Value>
                </Assign>
              </If.Then>
              <If.Else>
                <Assign DisplayName="Init empty dictionary" sap2010:WorkflowViewState.IdRef="Assign_18">
                  <Assign.To>
                    <OutArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)">[actionArguments]</OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)">[new Dictionary(of string, object)]</InArgument>
                  </Assign.Value>
                </Assign>
              </If.Else>
            </If>
            <ui:ForEach x:TypeArguments="x:String" DisplayName="For each key in the defaultActionArguments, search provided Arguments" sap2010:WorkflowViewState.IdRef="ForEach`1_1" Values="[defaultActionArguments.Keys]">
              <ui:ForEach.Body>
                <ActivityAction x:TypeArguments="x:String">
                  <ActivityAction.Argument>
                    <DelegateInArgument x:TypeArguments="x:String" Name="key" />
                  </ActivityAction.Argument>
                  <Sequence DisplayName="Search key and add default value if it is not found" sap2010:WorkflowViewState.IdRef="Sequence_12">
                    <If Condition="[not(actionArguments.ContainsKey(key))]" DisplayName="If key is not defined, add from default dictionary" sap2010:WorkflowViewState.IdRef="If_13">
                      <If.Then>
                        <InvokeMethod DisplayName="Add default to dictionary" sap2010:WorkflowViewState.IdRef="InvokeMethod_2" MethodName="Add">
                          <InvokeMethod.TargetObject>
                            <InArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)">[actionArguments]</InArgument>
                          </InvokeMethod.TargetObject>
                          <InArgument x:TypeArguments="x:String">[key]</InArgument>
                          <InArgument x:TypeArguments="x:Object">[defaultActionArguments.Item(key)]</InArgument>
                        </InvokeMethod>
                      </If.Then>
                    </If>
                  </Sequence>
                </ActivityAction>
              </ui:ForEach.Body>
            </ui:ForEach>
          </Sequence>
          <Assign DisplayName="Get Selector" sap2010:WorkflowViewState.IdRef="Assign_6">
            <Assign.To>
              <OutArgument x:TypeArguments="x:String">[selector]</OutArgument>
            </Assign.To>
            <Assign.Value>
              <InArgument x:TypeArguments="x:String">[in_States.Item(indexOfStates).Key]</InArgument>
            </Assign.Value>
          </Assign>
          <Assign DisplayName="Get Action" sap2010:WorkflowViewState.IdRef="Assign_7">
            <Assign.To>
              <OutArgument x:TypeArguments="x:String">[action]</OutArgument>
            </Assign.To>
            <Assign.Value>
              <InArgument x:TypeArguments="x:String">[in_States.Item(indexOfStates).Value.Key]</InArgument>
            </Assign.Value>
          </Assign>
          <ui:WaitUiElementAppear sap2010:Annotation.AnnotationText="normal Timeout or scanMode timeout. Use this timeout on the wait for element to appear" ContinueOnError="[convert.ToBoolean(actionArguments.Item(&quot;ContinueOnError&quot;))]" DisplayName="Find Element from selector" FoundElement="[element]" sap2010:WorkflowViewState.IdRef="WaitUiElementAppear_1" WaitActive="False" WaitVisible="False">
            <ui:WaitUiElementAppear.Target>
              <ui:Target ClippingRegion="{x:Null}" Element="{x:Null}" Selector="[selector]" TimeoutMS="[if(scanMode, convert.ToInt32(actionArguments.Item(&quot;ScanTimeoutMS&quot;)), convert.ToInt32(actionArguments.Item(&quot;TimeoutMS&quot;)))]" WaitForReady="INTERACTIVE" />
            </ui:WaitUiElementAppear.Target>
          </ui:WaitUiElementAppear>
        </Sequence>
        <If Condition="[not(scanMode)]" DisplayName="we are operating in normalMode" sap2010:WorkflowViewState.IdRef="If_35">
          <If.Then>
            <If sap2010:Annotation.AnnotationText="If the element was found, execute the actions you are instructed. If it is not found look for the next one." Condition="[element IsNot Nothing]" DisplayName="If state found, execute action" sap2010:WorkflowViewState.IdRef="If_31">
              <If.Then>
                <Sequence sap2010:Annotation.AnnotationText="If the element was found, Gather the action and it's arguments and execute it. Note that the action is a string." DisplayName="Element is found, execute actions " sap2010:WorkflowViewState.IdRef="Sequence_36">
                  <If Condition="[in_DebugMessages]" DisplayName="If debug" sap2010:WorkflowViewState.IdRef="If_26">
                    <If.Then>
                      <WriteLine DisplayName="Write line" sap2010:WorkflowViewState.IdRef="WriteLine_14" Text="[&quot;Element with selector:&quot;+ Environment.NewLine+&#xA;selector+Environment.NewLine+&#xA;&quot;found. Executing action &quot; + action]" />
                    </If.Then>
                  </If>
                  <Switch x:TypeArguments="x:String" DisplayName="Switch action" Expression="[action.Trim.ToLower]" sap2010:WorkflowViewState.IdRef="Switch`1_4">
                    <Sequence x:Key="click" DisplayName="Execute" sap2010:WorkflowViewState.IdRef="Sequence_33">
                      <If Condition="[in_DebugMessages]" DisplayName="If debug" sap2010:WorkflowViewState.IdRef="If_27">
                        <If.Then>
                          <WriteLine DisplayName="Write line" sap2010:WorkflowViewState.IdRef="WriteLine_15" Text="Executing click" />
                        </If.Then>
                      </If>
                      <Sequence DisplayName="Implementations" sap2010:WorkflowViewState.IdRef="Sequence_32">
                        <ui:Click DelayBefore="{x:Null}" DelayMS="{x:Null}" ClickType="CLICK_SINGLE" ContinueOnError="[convert.ToBoolean(actionArguments.Item(&quot;ContinueOnError&quot;))]" sap2010:WorkflowViewState.IdRef="Click_4" KeyModifiers="None" MouseButton="BTN_LEFT" SendWindowMessages="False" SimulateClick="False">
                          <ui:Click.CursorPosition>
                            <ui:CursorPosition Position="Center">
                              <ui:CursorPosition.OffsetX>
                                <InArgument x:TypeArguments="x:Int32" />
                              </ui:CursorPosition.OffsetX>
                              <ui:CursorPosition.OffsetY>
                                <InArgument x:TypeArguments="x:Int32" />
                              </ui:CursorPosition.OffsetY>
                            </ui:CursorPosition>
                          </ui:Click.CursorPosition>
                          <ui:Click.Target>
                            <ui:Target ClippingRegion="{x:Null}" Selector="{x:Null}" Element="[element]" TimeoutMS="[convert.ToInt32(actionArguments.Item(&quot;TimeoutMS&quot;))]" WaitForReady="INTERACTIVE" />
                          </ui:Click.Target>
                        </ui:Click>
                      </Sequence>
                    </Sequence>
                    <Sequence x:Key="type" DisplayName="Execute" sap2010:WorkflowViewState.IdRef="Sequence_35">
                      <If Condition="[in_DebugMessages]" DisplayName="If debug" sap2010:WorkflowViewState.IdRef="If_28">
                        <If.Then>
                          <WriteLine DisplayName="Write line" sap2010:WorkflowViewState.IdRef="WriteLine_16" Text="Executing type" />
                        </If.Then>
                      </If>
                      <Sequence DisplayName="Implementations" sap2010:WorkflowViewState.IdRef="Sequence_34">
                        <ui:TypeInto DelayBefore="{x:Null}" DelayBetweenKeys="{x:Null}" DelayMS="{x:Null}" Activate="True" ClickBeforeTyping="True" ContinueOnError="[convert.ToBoolean(actionArguments.Item(&quot;ContinueOnError&quot;))]" DisplayName="Type into" EmptyField="True" sap2010:WorkflowViewState.IdRef="TypeInto_5" SendWindowMessages="False" SimulateType="False" Text="[actionArguments.Item(&quot;Text&quot;).ToString]">
                          <ui:TypeInto.Target>
                            <ui:Target ClippingRegion="{x:Null}" Selector="{x:Null}" Element="[element]" TimeoutMS="[convert.ToInt32(actionArguments.Item(&quot;TimeoutMS&quot;))]" WaitForReady="INTERACTIVE" />
                          </ui:TypeInto.Target>
                        </ui:TypeInto>
                      </Sequence>
                    </Sequence>
                  </Switch>
                  <If Condition="[indexOfStates = in_States.Count - 1]" DisplayName="Last element defines success" sap2010:WorkflowViewState.IdRef="If_29">
                    <If.Then>
                      <Assign DisplayName="Completed successfully" sap2010:WorkflowViewState.IdRef="Assign_33">
                        <Assign.To>
                          <OutArgument x:TypeArguments="x:Boolean">[out_Successful]</OutArgument>
                        </Assign.To>
                        <Assign.Value>
                          <InArgument x:TypeArguments="x:Boolean">True</InArgument>
                        </Assign.Value>
                      </Assign>
                    </If.Then>
                  </If>
                  <Assign DisplayName="Inc Index" sap2010:WorkflowViewState.IdRef="Assign_34">
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:Int32">[indexOfStates]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:Int32">[indexOfStates+1]</InArgument>
                    </Assign.Value>
                  </Assign>
                </Sequence>
              </If.Then>
              <If.Else>
                <Sequence sap2010:Annotation.AnnotationText="Element not found, enter scanMode" DisplayName="Element not found" sap2010:WorkflowViewState.IdRef="Sequence_39">
                  <If Condition="[in_DebugMessages]" DisplayName="If debug" sap2010:WorkflowViewState.IdRef="If_30">
                    <If.Then>
                      <WriteLine DisplayName="Write line" sap2010:WorkflowViewState.IdRef="WriteLine_17" Text="[&quot;Element with selector:&quot;+ Environment.NewLine+&#xA;selector+Environment.NewLine+&#xA;&quot;not found&quot;]" />
                    </If.Then>
                  </If>
                  <Sequence DisplayName="Store Failed and enter scanMode" sap2010:WorkflowViewState.IdRef="Sequence_37">
                    <Assign DisplayName="Store Failed Index" sap2010:WorkflowViewState.IdRef="Assign_35">
                      <Assign.To>
                        <OutArgument x:TypeArguments="x:Int32">[io_FailedStateIndex]</OutArgument>
                      </Assign.To>
                      <Assign.Value>
                        <InArgument x:TypeArguments="x:Int32">[indexOfStates]</InArgument>
                      </Assign.Value>
                    </Assign>
                    <Assign DisplayName="Store Failed State" sap2010:WorkflowViewState.IdRef="Assign_36">
                      <Assign.To>
                        <OutArgument x:TypeArguments="scg:KeyValuePair(x:String, scg:KeyValuePair(x:String, scg:Dictionary(x:String, x:Object)))">[io_FailedState]</OutArgument>
                      </Assign.To>
                      <Assign.Value>
                        <InArgument x:TypeArguments="scg:KeyValuePair(x:String, scg:KeyValuePair(x:String, scg:Dictionary(x:String, x:Object)))">[in_States.Item(indexOfStates)]</InArgument>
                      </Assign.Value>
                    </Assign>
                    <Assign DisplayName="Enter scanMode" sap2010:WorkflowViewState.IdRef="Assign_37">
                      <Assign.To>
                        <OutArgument x:TypeArguments="x:Boolean">[scanMode]</OutArgument>
                      </Assign.To>
                      <Assign.Value>
                        <InArgument x:TypeArguments="x:Boolean">True</InArgument>
                      </Assign.Value>
                    </Assign>
                  </Sequence>
                  <Sequence DisplayName="Increment Retry and GoTo First State" sap2010:WorkflowViewState.IdRef="Sequence_38">
                    <Assign sap2010:Annotation.AnnotationText="Assign index to 0" DisplayName="Assign index to first" sap2010:WorkflowViewState.IdRef="Assign_38">
                      <Assign.To>
                        <OutArgument x:TypeArguments="x:Int32">[indexOfStates]</OutArgument>
                      </Assign.To>
                      <Assign.Value>
                        <InArgument x:TypeArguments="x:Int32">0</InArgument>
                      </Assign.Value>
                    </Assign>
                    <Assign DisplayName="Inc RetryNumber" sap2010:WorkflowViewState.IdRef="Assign_39">
                      <Assign.To>
                        <OutArgument x:TypeArguments="x:Int32">[RetryNumber]</OutArgument>
                      </Assign.To>
                      <Assign.Value>
                        <InArgument x:TypeArguments="x:Int32">[RetryNumber+1]</InArgument>
                      </Assign.Value>
                    </Assign>
                  </Sequence>
                </Sequence>
              </If.Else>
            </If>
          </If.Then>
          <If.Else>
            <Sequence DisplayName="If if scanMode, try to find a stable State" sap2010:WorkflowViewState.IdRef="Sequence_42">
              <If Condition="[element isNot Nothing]" DisplayName="If a state has been found" sap2010:WorkflowViewState.IdRef="If_34">
                <If.Then>
                  <If sap2010:Annotation.AnnotationText="All is well in the world. Go to work in normal mode" Condition="[indexOfStates &lt;= firstCrucialStateIndex]" DisplayName="If we could at least begin from before the first Crucial State" sap2010:WorkflowViewState.IdRef="If_33">
                    <If.Then>
                      <Sequence DisplayName="We have recovered" sap2010:WorkflowViewState.IdRef="Sequence_40">
                        <If Condition="[in_DebugMessages]" DisplayName="If debug" sap2010:WorkflowViewState.IdRef="If_32">
                          <If.Then>
                            <WriteLine DisplayName="Write line" sap2010:WorkflowViewState.IdRef="WriteLine_18" Text="[&quot;Element with selector:&quot;+ Environment.NewLine+&#xA;selector+Environment.NewLine+&#xA;&quot;has been found, action is &quot;+action]" />
                          </If.Then>
                        </If>
                        <Assign DisplayName="If element found exit scanMode" sap2010:WorkflowViewState.IdRef="Assign_40">
                          <Assign.To>
                            <OutArgument x:TypeArguments="x:Boolean">[scanMode]</OutArgument>
                          </Assign.To>
                          <Assign.Value>
                            <InArgument x:TypeArguments="x:Boolean">False</InArgument>
                          </Assign.Value>
                        </Assign>
                      </Sequence>
                    </If.Then>
                    <If.Else>
                      <Sequence DisplayName="Increment Retry and GoTo First State" sap2010:WorkflowViewState.IdRef="Sequence_41">
                        <Assign sap2010:Annotation.AnnotationText="Assign index to 0" DisplayName="Assign index to first" sap2010:WorkflowViewState.IdRef="Assign_41">
                          <Assign.To>
                            <OutArgument x:TypeArguments="x:Int32">[indexOfStates]</OutArgument>
                          </Assign.To>
                          <Assign.Value>
                            <InArgument x:TypeArguments="x:Int32">0</InArgument>
                          </Assign.Value>
                        </Assign>
                        <Assign DisplayName="Inc RetryNumber" sap2010:WorkflowViewState.IdRef="Assign_42">
                          <Assign.To>
                            <OutArgument x:TypeArguments="x:Int32">[RetryNumber]</OutArgument>
                          </Assign.To>
                          <Assign.Value>
                            <InArgument x:TypeArguments="x:Int32">[RetryNumber+1]</InArgument>
                          </Assign.Value>
                        </Assign>
                      </Sequence>
                    </If.Else>
                  </If>
                </If.Then>
                <If.Else>
                  <Assign DisplayName="Inc Index" sap2010:WorkflowViewState.IdRef="Assign_43">
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:Int32">[indexOfStates]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:Int32">[indexOfStates+1]</InArgument>
                    </Assign.Value>
                  </Assign>
                </If.Else>
              </If>
            </Sequence>
          </If.Else>
        </If>
      </Sequence>
    </While>
    <sads:DebugSymbol.Symbol>d3lDOlxVc2Vyc1xtaWhhaS5kdW5hcmVhbnVcR29vZ2xlIERyaXZlXFdvcmtzcGFjZVxVaVBhdGhcVGVtcGxhdGVzXFVpUGF0aF9SRUZyYW1ld29ya1xQcm9jZXNzTG9naWNDb21wb25lbnRzXFN0YXRlbGVzcy54YW1sfgFdAWMBAwGFAQGHAQECSwPbAg4CAQFNM002AgEETjVOPAIBA08zTzYCAQJRBdkCDQIBBVIH2AISAgEJUdEBUfcBAgEGVDxURwIBC1ZSVtICAgEKWgmeARQDAYEBnwEJ1wIOAgEMWwuIARYDAZUBiQELkAEUAwGPAZEBC5gBFAMBiQGZAQudASQDAYIBnwEXnwEoAgENoQENnAISAgEvnwIN1QIYAgEPXA1xEgMBpgFyDYcBGgMBlgGOATaOAVkDAZIBiwE3iwFBAwGQAZYBNpYBXwMBjAGTATeTAT8DAYoBmQGtApkBuAIDAYcBmwFQmwFcAwGFAZsBZ5sB9wEDAYQBmQGuAZkB9gEDAYMBoQGrAaEBxAECATCjARHlARwCAVHoARGaAhwCATGgAg/UAhQCARBcG1xWAwGnAV4RZRoDAa4BaBFvGgMBqgFyvQFy3AEDAaQBeBOEAR4DAZcBpAETqAEYAgF8qQET0AEcAgFf0QET3AEYAgFX3QET5AEcAgFS6QET7QEYAgFM7gEThwIeAgE8iAITmQIeAgEyoAIdoAI2AgERogITyAIYAgEXywIT0gIcAgESY1ZjgQEDAbEBYFdgaAMBrwFtVm15AwGtAWpXamgDAasBeRWDARoDAZgBpAEhpAE1AgF9pgEXpgGCAgIBf6kBXakBdAIBYKoBFcEBIAIBcMIBFc8BIAIBYtEBIdEBSAIBWNMBF9oBIAIBW+IBPeIBTgIBVd8BPt8BTQIBU+kBIekBNQIBTesBF+sB6gECAU/vARX2AR4CAUf3ARX+AR4CAUH/ARWGAh4CAT2JAhWQAh4CATiRAhWYAh4CATOiAnmiAqcBAgEYpAIXsgIiAgEltQIXxgIiAgEb0AI90AJOAgEVzQI+zQJNAgETeSN5TAMBmQF7GYEBKAMBnAGmAW+mAf8BAwGAAasBF68BHAIBd7ABF8ABIgIBccMBF8cBHAIBa8gBF84BIgIBY9gBQ9gBRwIBXtUBRNUBVAIBXOsBb+sB5wECAVD0AT/0AU4CAUrxAUDxAVUCAUj8AZIB/AGxAQIBRPkBkwH5AaMBAgFChAJBhAJFAgFAgQJCgQJMAgE+jgI/jgJAAgE7iwJAiwJPAgE5lgI/lgJOAgE2kwJAkwJNAgE0pQIZqQIeAgEqqgIZsQIiAgEmtgIZvQIiAgEhvgIZxQIiAgEcgAFCgAFkAwGhAX9Cf0cDAZ8BfV59bwMBnQGrASWrATkCAXitARutAYcBAgF6sQEZvwEkAgFywwElwwE5AgFsxQEbxQGGAQIBbskBGc0BJwIBZKUCJ6UCOwIBK6cCHacCiAICAS2vAkWvAkoCASmsAkasAlACASe7AkO7AkQCASS4AkS4AlMCASLDAkPDAlICAR/AAkTAAlECAR2tAXOtAYQBAgF7vQF0vQG0AQIBdrEBdrEBvgECAXW9AV69AWkCAXPFAXPFAYMBAgFvywF0ywG0AQIBaskBpQHJAe0BAgFpyQH6AskBrQMCAWfLAV7LAWkCAWWnAnWnAoUCAgEu</sads:DebugSymbol.Symbol>
  </Sequence>
  <sap2010:WorkflowViewState.ViewStateManager>
    <sap2010:ViewStateManager>
      <sap2010:ViewStateData Id="Assign_4" sap:VirtualizedContainerService.HintSize="242,60" />
      <sap2010:ViewStateData Id="Assign_18" sap:VirtualizedContainerService.HintSize="242,60" />
      <sap2010:ViewStateData Id="If_15" sap:VirtualizedContainerService.HintSize="509,208">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="InvokeMethod_2" sap:VirtualizedContainerService.HintSize="218,132" />
      <sap2010:ViewStateData Id="If_13" sap:VirtualizedContainerService.HintSize="464,280" />
      <sap2010:ViewStateData Id="Sequence_12" sap:VirtualizedContainerService.HintSize="486,404">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="ForEach`1_1" sap:VirtualizedContainerService.HintSize="509,538">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Sequence_11" sap:VirtualizedContainerService.HintSize="314,153">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Assign_6" sap:VirtualizedContainerService.HintSize="314,60" />
      <sap2010:ViewStateData Id="Assign_7" sap:VirtualizedContainerService.HintSize="314,60" />
      <sap2010:ViewStateData Id="WaitUiElementAppear_1" sap:VirtualizedContainerService.HintSize="314,110">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Sequence_15" sap:VirtualizedContainerService.HintSize="1876,627">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="WriteLine_14" sap:VirtualizedContainerService.HintSize="210,64" />
      <sap2010:ViewStateData Id="If_26" sap:VirtualizedContainerService.HintSize="476,51">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="WriteLine_15" sap:VirtualizedContainerService.HintSize="210,61" />
      <sap2010:ViewStateData Id="If_27" sap:VirtualizedContainerService.HintSize="464,51">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Click_4" sap:VirtualizedContainerService.HintSize="314,68" />
      <sap2010:ViewStateData Id="Sequence_32" sap:VirtualizedContainerService.HintSize="464,192">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Sequence_33" sap:VirtualizedContainerService.HintSize="486,561">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="WriteLine_16" sap:VirtualizedContainerService.HintSize="210,61" />
      <sap2010:ViewStateData Id="If_28" sap:VirtualizedContainerService.HintSize="464,51">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="TypeInto_5" sap:VirtualizedContainerService.HintSize="314,96" />
      <sap2010:ViewStateData Id="Sequence_34" sap:VirtualizedContainerService.HintSize="464,220">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Sequence_35" sap:VirtualizedContainerService.HintSize="486,589">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Switch`1_4" sap:VirtualizedContainerService.HintSize="476,160">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Assign_33" sap:VirtualizedContainerService.HintSize="242,60" />
      <sap2010:ViewStateData Id="If_29" sap:VirtualizedContainerService.HintSize="476,208">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Assign_34" sap:VirtualizedContainerService.HintSize="476,60" />
      <sap2010:ViewStateData Id="Sequence_36" sap:VirtualizedContainerService.HintSize="498,765">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="WriteLine_17" sap:VirtualizedContainerService.HintSize="210,64" />
      <sap2010:ViewStateData Id="If_30" sap:VirtualizedContainerService.HintSize="464,212">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Assign_35" sap:VirtualizedContainerService.HintSize="242,60" />
      <sap2010:ViewStateData Id="Assign_36" sap:VirtualizedContainerService.HintSize="242,60" />
      <sap2010:ViewStateData Id="Assign_37" sap:VirtualizedContainerService.HintSize="242,60" />
      <sap2010:ViewStateData Id="Sequence_37" sap:VirtualizedContainerService.HintSize="464,384">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Assign_38" sap:VirtualizedContainerService.HintSize="242,87">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Assign_39" sap:VirtualizedContainerService.HintSize="242,60" />
      <sap2010:ViewStateData Id="Sequence_38" sap:VirtualizedContainerService.HintSize="464,51">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Sequence_39" sap:VirtualizedContainerService.HintSize="486,878">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="If_31" sap:VirtualizedContainerService.HintSize="1009,1053">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="WriteLine_18" sap:VirtualizedContainerService.HintSize="210,64" />
      <sap2010:ViewStateData Id="If_32" sap:VirtualizedContainerService.HintSize="242,51">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Assign_40" sap:VirtualizedContainerService.HintSize="242,60" />
      <sap2010:ViewStateData Id="Sequence_40" sap:VirtualizedContainerService.HintSize="264,275">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Assign_41" sap:VirtualizedContainerService.HintSize="242,87">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Assign_42" sap:VirtualizedContainerService.HintSize="242,60" />
      <sap2010:ViewStateData Id="Sequence_41" sap:VirtualizedContainerService.HintSize="264,311">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="If_33" sap:VirtualizedContainerService.HintSize="553,486">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Assign_43" sap:VirtualizedContainerService.HintSize="242,60" />
      <sap2010:ViewStateData Id="If_34" sap:VirtualizedContainerService.HintSize="820,634" />
      <sap2010:ViewStateData Id="Sequence_42" sap:VirtualizedContainerService.HintSize="842,758">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="If_35" sap:VirtualizedContainerService.HintSize="1876,1201">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Sequence_2" sap:VirtualizedContainerService.HintSize="1898,2019">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="While_1" sap:VirtualizedContainerService.HintSize="1924,2204">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Sequence_1" sap:VirtualizedContainerService.HintSize="1946,2520">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Statelss_1" sap:VirtualizedContainerService.HintSize="1986,2600" />
    </sap2010:ViewStateManager>
  </sap2010:WorkflowViewState.ViewStateManager>
</Activity>